name: Build & Release draft
on: [push, pull_request]

jobs:
  deploy:
    name: build dependencies & create artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone PrestaShop for core dependencies
        run: |
          git clone --depth=50 https://github.com/PrestaShop/PrestaShop.git ~/PrestaShop
          rm -rf ~/PrestaShop/modules/blockwishlist
          cd ..
          mv blockwishlist ~/PrestaShop/modules
          ln -s ~/PrestaShop/modules/blockwishlist
          cd blockwishlist

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x

      - run: npm install

      - name: Build PrestaShop assets
        run: |
          npm --prefix ~/PrestaShop/admin-dev/themes/new-theme install
          npm --prefix ~/PrestaShop/admin-dev/themes/new-theme run build

      - name: Build JS dependencies
        run: |
          npm --prefix ~/PrestaShop/modules/blockwishlist run build
          rm -rf node_modules

      - name: Install composer dependencies
        run: composer install --no-dev -o

      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v2.0
        with:
          paths: node_modules

      - name: Prepare auto-index tool
        run: composer global require prestashop/autoindex

      - name: Generate index.php
        run: ~/.composer/vendor/bin/autoindex

      - name: Create & upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: /home/runner/work/blockwishlist/

  update_release_draft:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}

      - id: release_info
        uses: toolmantim/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare for Release
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}

      - name: Clean existing assets
        shell: bash
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          assets=`bin/hub api -t repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.id }}/assets | awk '/\].url/ { print $2 }'`
          for asset in $assets
          do
              bin/hub api -X DELETE $asset
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip
